name: Copy ACR Image

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Container image name (with or without tag)'
        required: true
        type: string
        default: 'myorg/api'
      version:
        description: 'Version tag to apply to target image'
        required: true
        type: string
        default: '1.0.0'
      dry_run:
        description: 'Enable dry-run mode (shows what would be done without executing)'
        required: false
        type: boolean
        default: false

env:
  # Use input values or fall back to repository secrets
  IMAGE_NAME: ${{ github.event.inputs.image_name }}
  VERSION: ${{ github.event.inputs.version }}
  SOURCE_ACR: easyinsuredev.azurecr.io # On Ponggun Azure Directory
  TARGET_ACR: ttshared-hxcfc7b6cfchfbe3.azurecr.io # On Nakorn Azure Directory
  DRY_RUN: ${{ github.event.inputs.dry_run }}

jobs:
  copy-acr-image:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate environment variables
        run: |
          if [ -z "$IMAGE_NAME" ]; then
            echo "‚ùå IMAGE_NAME is required"
            exit 1
          fi
          if [ -z "$VERSION" ]; then
            echo "‚ùå VERSION is required"
            exit 1
          fi
          if [ -z "$SOURCE_ACR" ]; then
            echo "‚ùå SOURCE_ACR is required (set as repository secret or workflow input)"
            exit 1
          fi
          if [ -z "$TARGET_ACR" ]; then
            echo "‚ùå TARGET_ACR is required (set as repository secret or workflow input)"
            exit 1
          fi
          
          echo "‚úÖ Environment validation passed"
          echo "üìã Configuration:"
          echo "   Image: $IMAGE_NAME"
          echo "   Version: $VERSION"
          echo "   Source ACR: $SOURCE_ACR"
          echo "   Target ACR: $TARGET_ACR"
          echo "   Dry Run: $DRY_RUN"
          echo "   Mode: Two-step (pull then push)"

      - name: Setup Docker
        run: |
          echo "üê≥ Verifying Docker installation..."
          docker --version
          echo "‚úÖ Docker is available"

      - name: Azure CLI Login (Source ACR)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIAL_SOURCE_ACR }} 

      - name: Verify Source Azure CLI authentication
        run: |
          echo "üîç Verifying Azure CLI authentication for source ACR..."
          az account show --output table
          echo "‚úÖ Source Azure CLI authentication verified"

      - name: Pull Image
        run: |
          echo "üöÄ Starting image pull and tag process..."
          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç Running in DRY RUN mode - no actual changes will be made"
          fi
          
          pnpm copy-acr
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          VERSION: ${{ env.VERSION }}
          SOURCE_ACR: ${{ env.SOURCE_ACR }}
          TARGET_ACR: ${{ env.TARGET_ACR }}
          DRY_RUN: ${{ env.DRY_RUN }}
          MODE: pull
          SKIP_AUTH: false

      - name: Tag Image
        run: |
          echo "üöÄ Starting image tag process..."
          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç Running in DRY RUN mode - no actual changes will be made"
          fi
          
          pnpm copy-acr
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          VERSION: ${{ env.VERSION }}
          SOURCE_ACR: ${{ env.SOURCE_ACR }}
          TARGET_ACR: ${{ env.TARGET_ACR }}
          DRY_RUN: ${{ env.DRY_RUN }}
          MODE: tag
          SKIP_AUTH: true

      - name: Azure CLI Login (Target ACR)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIAL_TARGET_ACR }}

      - name: Verify Target Azure CLI authentication
        run: |
          echo "üîç Verifying Azure CLI authentication for target ACR..."
          az account show --output table
          echo "‚úÖ Target Azure CLI authentication verified"

      - name: Push Image
        run: |
          echo "üöÄ Starting image push process..."
          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç Running in DRY RUN mode - no actual changes will be made"
          fi
          
          pnpm copy-acr
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          VERSION: ${{ env.VERSION }}
          SOURCE_ACR: ${{ env.SOURCE_ACR }}
          TARGET_ACR: ${{ env.TARGET_ACR }}
          DRY_RUN: ${{ env.DRY_RUN }}
          MODE: push
          SKIP_AUTH: false

      - name: Cleanup Docker images (if not dry run)
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          echo "üßπ Cleaning up local Docker images..."
          
          # Clean up source image
          SOURCE_IMAGE="${SOURCE_ACR}/${IMAGE_NAME}"
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "${SOURCE_IMAGE}"; then
            echo "Removing source image: ${SOURCE_IMAGE}"
            docker rmi "${SOURCE_IMAGE}" || echo "Failed to remove ${SOURCE_IMAGE}"
          fi
          
          # Clean up target image (extract base name for tagging)
          IMAGE_BASE=$(echo "${IMAGE_NAME}" | cut -d':' -f1)
          TARGET_IMAGE="${TARGET_ACR}/${IMAGE_BASE}:${VERSION}"
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "${TARGET_IMAGE}"; then
            echo "Removing target image: ${TARGET_IMAGE}"
            docker rmi "${TARGET_IMAGE}" || echo "Failed to remove ${TARGET_IMAGE}"
          fi
          
          echo "‚úÖ Cleanup completed"
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          VERSION: ${{ env.VERSION }}
          SOURCE_ACR: ${{ env.SOURCE_ACR }}
          TARGET_ACR: ${{ env.TARGET_ACR }}

      - name: Summary
        if: always()
        run: |
          echo "üìä ACR Copy Workflow Summary"
          echo "================================"
          echo "Image: ${{ env.IMAGE_NAME }}"
          echo "Version: ${{ env.VERSION }}"
          echo "Source ACR: ${{ env.SOURCE_ACR }}"
          echo "Target ACR: ${{ env.TARGET_ACR }}"
          echo "Dry Run: ${{ env.DRY_RUN }}"
          echo "Mode: Two-step (pull then push)"
          echo "Status: ${{ job.status }}"
          echo "================================"
          
          if [ "${{ job.status }}" = "success" ]; then
            if [ "$DRY_RUN" = "true" ]; then
              echo "‚úÖ Dry run completed successfully - no actual changes were made"
            else
              IMAGE_BASE=$(echo "$IMAGE_NAME" | cut -d':' -f1)
              echo "‚úÖ Image successfully copied to: $TARGET_ACR/$IMAGE_BASE:$VERSION"
            fi
          else
            echo "‚ùå Workflow failed - check the logs above for details"
          fi